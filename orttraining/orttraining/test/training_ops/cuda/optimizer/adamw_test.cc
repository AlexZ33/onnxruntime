// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#include "gtest/gtest.h"

#include "test/providers/provider_test_utils.h"
#include "orttraining/test/training_ops/cuda/optimizer/common.h"

namespace onnxruntime {
namespace test {
namespace optimizer {

#if USE_CUDA

namespace {

void TorchAdamWSingleWeightTestLoop10Steps(bool use_baseline_for_each_iteration) {
  size_t total_step = 10;
  float lr = 1e-03f;

  std::pair<float, float> weight_tolerance{1e-4f, 1e-5f};  // rtol, atol
  std::pair<float, float> momentum1_tolerance{1e-3f, 1e-6f};
  std::pair<float, float> momentum2_tolerance{1e-2f, 1e-7f};

  if (!use_baseline_for_each_iteration) {
    // Loose the tolerance as all states are maintained (without reloading from baseline) across different steps.
    momentum2_tolerance.first = 1e-3f;
    momentum2_tolerance.second = 1e-6f;
  }

  // Test data generated by onnxruntime/test/testdata/optimizers/adamw_test_data_generator.py

  // 11 steps of weight values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>> named_weights{
      {
          "fc1.weight",
          {
              {-0.18330415f, 0.6739549f, 0.3117089f, 0.42830977f, -0.39579117f, 0.07424858f},
              {-0.18230231f, 0.6729482f, 0.31270576f, 0.4273055f, -0.39478722f, 0.073247835f},
              {-0.18131775f, 0.67253f, 0.31352443f, 0.42674997f, -0.39517558f, 0.072352484f},
              {-0.18059653f, 0.6721751f, 0.3133565f, 0.42615423f, -0.39525184f, 0.071778126f},
              {-0.17977662f, 0.6717074f, 0.31389162f, 0.42545584f, -0.39562652f, 0.07182311f},
              {-0.17979622f, 0.6710587f, 0.31389156f, 0.4246631f, -0.39521962f, 0.07233689f},
              {-0.17989334f, 0.67029196f, 0.31416565f, 0.42445076f, -0.3947013f, 0.07293851f},
              {-0.179972f, 0.66955495f, 0.31445312f, 0.4242259f, -0.39403903f, 0.07336583f},
              {-0.17965378f, 0.66875094f, 0.31469414f, 0.42395133f, -0.3932723f, 0.07322361f},
              {-0.1792204f, 0.6680363f, 0.3151285f, 0.4236793f, -0.3924334f, 0.0730921f},
              {-0.17886575f, 0.66727906f, 0.31523493f, 0.42340374f, -0.39180413f, 0.07277241f},
          },
      },
  };

  // 10 steps of gradient values used to apply optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>> named_gradients{
      {
          "fc1.weight",
          {
              {-0.18660535f, 1.0501877f, -0.06538727f, 0.78924006f, -0.06989894f, 0.08311288f},
              {-0.14019422f, -0.33581918f, -0.015272594f, -0.11933345f, 0.15028854f, 0.3035297f},
              {0.014209908f, 0.052604817f, 0.0971713f, 0.2388823f, -0.056654222f, -0.053932328f},
              {-0.31329307f, 0.3852916f, -0.5335826f, 0.41899508f, 0.117559165f, -0.29191104f},
              {0.52060837f, 0.90293646f, 0.45157418f, 1.2402161f, -0.57814085f, -0.977114f},
              {0.101783685f, 1.272549f, -0.43885383f, -1.2290779f, -0.24205326f, -0.41463307f},
              {-0.0077258185f, 0.28624183f, -0.08212745f, 0.15442972f, -0.4620122f, 0.2059978f},
              {-0.71347064f, 0.98037124f, 0.02016977f, 0.3170175f, -0.6400585f, 1.4056847f},
              {-0.35443836f, 0.0006996552f, -0.5025327f, 0.11614283f, -0.77054685f, 0.019379474f},
              {0.06727458f, 0.71261775f, 0.5345064f, 0.13658585f, 0.27908903f, 0.8989311f},
          },
      },
  };

  // 11 steps of momentum1 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum1s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {-0.018660536f, 0.10501877f, -0.0065387273f, 0.07892401f, -0.0069898935f, 0.008311288f},
                  {-0.030813904f, 0.060934976f, -0.007412114f, 0.05909826f, 0.00873795f, 0.03783313f},
                  {-0.026311522f, 0.06010196f, 0.0030462276f, 0.077076666f, 0.002198733f, 0.028656583f},
                  {-0.055009678f, 0.092620924f, -0.05061666f, 0.111268505f, 0.013734776f, -0.0034001796f},
                  {0.002552128f, 0.17365249f, -0.0003975735f, 0.22416328f, -0.04545279f, -0.10077157f},
                  {0.012475284f, 0.28354216f, -0.0442432f, 0.07883913f, -0.06511284f, -0.13215771f},
                  {0.010455173f, 0.2838121f, -0.048031624f, 0.08639819f, -0.10480277f, -0.09834216f},
                  {-0.061937407f, 0.353468f, -0.041211486f, 0.10946012f, -0.15832835f, 0.05206053f},
                  {-0.09118751f, 0.31819117f, -0.08734361f, 0.110128395f, -0.21955018f, 0.04879242f},
                  {-0.0753413f, 0.3576338f, -0.025158612f, 0.11277413f, -0.16968626f, 0.13380629f},
              },
          },
      };

  // 11 steps of momentum2 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum2s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {3.48216e-05f, 0.0011028942f, 4.2755e-06f, 0.0006228999f, 4.8859e-06f, 6.9078e-06f},
                  {5.44412e-05f, 0.0012145658f, 4.5045e-06f, 0.0006365175f, 2.74676e-05f, 9.90311e-05f},
                  {5.45886e-05f, 0.0012161186f, 1.39422e-05f, 0.0006929458f, 3.06499e-05f, 0.0001018408f},
                  {0.0001526866f, 0.0013633522f, 0.0002986387f, 0.0008678096f, 4.44394e-05f, 0.000186951f},
                  {0.000423567f, 0.0021772832f, 0.0005022593f, 0.002405078f, 0.0003786418f, 0.0011415159f},
                  {0.0004335034f, 0.003794487f, 0.0006943497f, 0.0039133052f, 0.0004368529f, 0.0013122951f},
                  {0.0004331296f, 0.0038726272f, 0.0007004002f, 0.00393324f, 0.0006498714f, 0.001353418f},
                  {0.0009417369f, 0.004829882f, 0.0007001066f, 0.004029807f, 0.0010588964f, 0.0033280142f},
                  {0.0010664216f, 0.004825053f, 0.0009519457f, 0.0040392666f, 0.00165158f, 0.0033250616f},
                  {0.0010698811f, 0.0053280517f, 0.0012366908f, 0.0040538833f, 0.001727819f, 0.004129814f},
              },
          },
      };

  ASSERT_EQ(named_weights.size(), 1);
  ASSERT_EQ(named_gradients.size(), 1);
  ASSERT_EQ(named_momentum1s.size(), 1);
  ASSERT_EQ(named_momentum2s.size(), 1);

  ASSERT_EQ(named_weights["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_gradients["fc1.weight"].size(), total_step);
  ASSERT_EQ(named_momentum1s["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_momentum2s["fc1.weight"].size(), total_step + 1);

  std::unordered_map<std::string, VectorInt64> weight_name_shape_mapping =
      {{"fc1.weight", {2, 3}}};

  AdamWTestLoop(use_baseline_for_each_iteration, total_step, lr,
                static_cast<float>(0.9f),    // alpha
                static_cast<float>(0.999f),  // beta
                static_cast<float>(1e-8f),   // epsilon
                static_cast<float>(1e-2f),   // weight_decay
                static_cast<int64_t>(0),     // adam_mode
                static_cast<int64_t>(1),     // correct_bias
                named_weights, named_gradients,
                named_momentum1s, named_momentum2s,
                weight_name_shape_mapping,
                weight_tolerance,
                momentum1_tolerance,
                momentum2_tolerance);
}

TEST(AdamWTest, TorchAdamWSingleWeightTest_Loop10Steps) {
  TorchAdamWSingleWeightTestLoop10Steps(false);
}

TEST(AdamWTest, TorchAdamWSingleWeightStrictTest_Loop10Steps) {
  TorchAdamWSingleWeightTestLoop10Steps(true);
}

void TorchAdamWMultipleWeightsTestLoop10Steps(bool use_baseline_for_each_iteration) {
  size_t total_step = 10;
  float lr = 1e-03f;

  std::pair<float, float> weight_tolerance{1e-4f, 1e-5f};  // rtol, atol
  std::pair<float, float> momentum1_tolerance{1e-3f, 1e-6f};
  std::pair<float, float> momentum2_tolerance{1e-2f, 1e-7f};

  if (!use_baseline_for_each_iteration) {
    // Loose the tolerance as all states are maintained (without reloading from baseline) across different steps.
    momentum2_tolerance.first = 1e-3f;
    momentum2_tolerance.second = 1e-6f;
  }

  // Test data generated by onnxruntime/test/testdata/optimizers/adamw_test_data_generator.py

  // 11 steps of weight values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>> named_weights{
      {
          "fc1.weight",
          {
              {0.039699044f, -0.1405438f, 0.6361624f, 0.3636222f, -0.21526536f, 0.3459897f},
              {0.040698644f, -0.1415424f, 0.636156f, 0.36361855f, -0.2142632f, 0.34498626f},
              {0.040811654f, -0.14246702f, 0.6368938f, 0.36287078f, -0.21388789f, 0.3441329f},
              {0.040369015f, -0.14334096f, 0.63773847f, 0.3634778f, -0.21361604f, 0.34342209f},
              {0.040421575f, -0.14390942f, 0.6384292f, 0.36397436f, -0.21339297f, 0.34283924f},
              {0.040130284f, -0.1445896f, 0.6390121f, 0.36439353f, -0.21320412f, 0.34234607f},
              {0.04048722f, -0.14453566f, 0.638672f, 0.3640188f, -0.21312062f, 0.3417903f},
              {0.04066716f, -0.14445946f, 0.63837415f, 0.36369106f, -0.21294877f, 0.34122306f},
              {0.040859845f, -0.14448948f, 0.63874584f, 0.36315888f, -0.21277392f, 0.34052727f},
              {0.04108748f, -0.14455085f, 0.6390751f, 0.36268604f, -0.21261847f, 0.33990923f},
              {0.041274574f, -0.14464155f, 0.6393683f, 0.36226365f, -0.2124795f, 0.3393573f},
          },
      },
      {
          "fc1.bias",
          {
              {0.5179555f, -0.43510795f, -0.12118204f},
              {0.5169503f, -0.4351036f, -0.12218084f},
              {0.51600605f, -0.4343551f, -0.1231803f},
              {0.5150944f, -0.43356514f, -0.1239735f},
              {0.5141467f, -0.43291724f, -0.124623016f},
              {0.51373416f, -0.432369f, -0.12517181f},
              {0.513312f, -0.43262294f, -0.12569128f},
              {0.51328874f, -0.43284413f, -0.12628831f},
              {0.51314485f, -0.4324527f, -0.12694976f},
              {0.5130518f, -0.43210477f, -0.1275368f},
              {0.51289135f, -0.43179372f, -0.12806058f},
          },
      },
      {
          "fc2.weight",
          {
              {-0.5107945f, 0.045720927f, 0.21493156f, -0.03950736f, -0.35901335f, 0.30300942f},
              {-0.5097894f, 0.04572047f, 0.21592939f, -0.040506963f, -0.35900974f, 0.3020064f},
              {-0.5088188f, 0.046464145f, 0.2166485f, -0.04150328f, -0.35975027f, 0.30123964f},
              {-0.5078956f, 0.047161855f, 0.21732824f, -0.042312246f, -0.3605463f, 0.3005772f},
              {-0.50694114f, 0.047733285f, 0.21788464f, -0.043107755f, -0.36119768f, 0.30003402f},
              {-0.50652146f, 0.048216194f, 0.21835458f, -0.043949466f, -0.3617477f, 0.29957443f},
              {-0.50599563f, 0.047795072f, 0.21833022f, -0.04463575f, -0.36134148f, 0.2992945f},
              {-0.50579107f, 0.047427252f, 0.21826117f, -0.045370333f, -0.36098626f, 0.29902303f},
              {-0.5054701f, 0.04710954f, 0.21849227f, -0.046180747f, -0.36095497f, 0.29850963f},
              {-0.50520056f, 0.046827443f, 0.21869715f, -0.046999704f, -0.3609268f, 0.2980535f},
              {-0.50488675f, 0.046575632f, 0.21887977f, -0.047773924f, -0.36090127f, 0.2976461f},
          },
      },
      {
          "fc2.bias",
          {
              {0.023823332f, 0.53758854f},
              {0.024823094f, 0.5365832f},
              {0.025780898f, 0.5355805f},
              {0.026681323f, 0.53475773f},
              {0.027619561f, 0.5339611f},
              {0.028185476f, 0.53309274f},
              {0.028722009f, 0.53240806f},
              {0.02889527f, 0.53165853f},
              {0.029224215f, 0.53083247f},
              {0.029507741f, 0.53001714f},
              {0.029832995f, 0.5292876f},
          },
      },
  };

  // 10 steps of gradient values used to apply optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>> named_gradients{
      {
          "fc1.weight",
          {
              {-0.09586181f, 0.17629345f, 0.0f, 0.0f, -0.32529348f, 0.04030715f},
              {0.068338424f, 0.084546804f, -0.032574944f, 0.0038211804f, 0.11912196f, 0.22664978f},
              {0.14586228f, 0.06190881f, -0.048464328f, -0.08001512f, 0.010100813f, 0.019007523f},
              {-0.13794768f, -0.04670714f, 0.0f, 0.0f, 0.0f, 0.0f},
              {0.17390619f, 0.54866207f, 0.0f, 0.0f, 0.0f, 0.0f},
              {-0.58828557f, -0.75700414f, 0.17398578f, 0.22667544f, 0.052081093f, 0.06785327f},
              {0.16339642f, -0.05490701f, 0.0f, 0.0f, -0.07044855f, 0.04285267f},
              {-0.047095288f, 0.189476f, -0.504035f, 0.18439727f, -0.016731672f, 0.17345011f},
              {-0.080633014f, 0.0700092f, 0.0f, 0.0f, 0.0f, 0.0f},
              {0.022376327f, 0.073439084f, 0.0f, 0.0f, 0.0f, 0.0f},
          },
      },
      {
          "fc1.bias",
          {
              {0.30900255f, 0.0f, 0.36434337f},
              {0.1620592f, -0.025315104f, 0.37579829f},
              {0.13360804f, -0.07762981f, 0.017482705f},
              {0.30951613f, 0.0f, 0.0f},
              {-0.28703725f, 0.0f, 0.0f},
              {0.07509521f, 0.16361246f, 0.04897593f},
              {-0.38377434f, 0.0f, 0.18683575f},
              {0.17580108f, -0.458839f, 0.19719897f},
              {-0.050671168f, 0.0f, 0.0f},
              {0.11543156f, 0.0f, 0.0f},
          },
      },
      {
          "fc2.weight",
          {
              {-0.31826627f, 0.0f, -0.10227942f, 0.7872374f, 0.0f, 0.2039589f},
              {-0.20357697f, -0.012987848f, -0.0072856103f, 0.7206295f, 0.021516945f, 0.027567107f},
              {-0.13538049f, -0.117373414f, -0.022564847f, 0.067673355f, 0.057621133f, 0.023621686f},
              {-0.34123802f, 0.0f, 0.0f, 0.30149734f, 0.0f, 0.0f},
              {0.30987015f, 0.0f, 0.0f, 1.4480324f, 0.0f, 0.0f},
              {-0.23433402f, 0.53708684f, 0.08742399f, -0.13039063f, -0.268532f, -0.043710135f},
              {0.3030513f, 0.0f, 0.012864593f, 0.65198517f, 0.0f, 0.011254168f},
              {-0.22530147f, -0.007280223f, -0.09456503f, 1.1682873f, 0.15443315f, 0.19558397f},
              {0.024412254f, 0.0f, 0.0f, 0.58622336f, 0.0f, 0.0f},
              {-0.11912608f, 0.0f, 0.0f, 0.22673516f, 0.0f, 0.0f},
          },
      },
      {
          "fc2.bias",
          {
              {-0.73845947f, 1.7262223f},
              {-0.4450062f, 1.5997316f},
              {-0.27726507f, 0.17997742f},
              {-0.65889275f, 0.5939798f},
              {0.39522403f, 2.0108204f},
              {-0.11679566f, -0.36259097f},
              {0.63924235f, 1.3513944f},
              {-0.5523114f, 2.2823963f},
              {0.025102139f, 0.8224809f},
              {-0.22954473f, 0.0113738775f},
          },
      },
  };

  // 11 steps of momentum1 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum1s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {-0.009586181f, 0.017629346f, 0.0f, 0.0f, -0.03252935f, 0.004030715f},
                  {-0.0017937194f, 0.02432109f, -0.0032574944f, 0.000382118f, -0.017364217f, 0.026292624f},
                  {0.012971881f, 0.028079862f, -0.0077781775f, -0.0076576066f, -0.014617712f, 0.025564114f},
                  {-0.0021200753f, 0.020601163f, -0.00700036f, -0.0068918457f, -0.013155941f, 0.023007702f},
                  {0.015482552f, 0.073407255f, -0.0063003236f, -0.0062026605f, -0.011840346f, 0.020706931f},
                  {-0.044894263f, -0.009633889f, 0.011728288f, 0.01708515f, -0.0054482017f, 0.025421565f},
                  {-0.024065195f, -0.014161201f, 0.010555458f, 0.015376635f, -0.011948236f, 0.027164675f},
                  {-0.026368203f, 0.0062025194f, -0.040903587f, 0.032278698f, -0.01242658f, 0.04179322f},
                  {-0.031794686f, 0.012583188f, -0.036813226f, 0.029050825f, -0.011183922f, 0.0376139f},
                  {-0.026377583f, 0.018668776f, -0.0331319f, 0.026145743f, -0.0100655295f, 0.033852506f},
              },
          },
          {
              "fc1.bias",
              {
                  {0.0f, 0.0f, 0.0f},
                  {0.030900257f, 0.0f, 0.036434337f},
                  {0.04401615f, -0.0025315105f, 0.070370734f},
                  {0.052975338f, -0.01004134f, 0.06508193f},
                  {0.07862942f, -0.009037206f, 0.05857374f},
                  {0.042062752f, -0.008133485f, 0.052716363f},
                  {0.045365997f, 0.009041109f, 0.05234232f},
                  {0.0024519633f, 0.008136998f, 0.06579167f},
                  {0.019786876f, -0.0385606f, 0.0789324f},
                  {0.012741071f, -0.03470454f, 0.071039155f},
                  {0.02301012f, -0.031234086f, 0.063935235f},
              },
          },
          {
              "fc2.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {-0.031826627f, 0.0f, -0.010227942f, 0.07872374f, 0.0f, 0.02039589f},
                  {-0.04900166f, -0.0012987849f, -0.009933708f, 0.14291432f, 0.0021516946f, 0.021113012f},
                  {-0.05763954f, -0.012906248f, -0.011196822f, 0.13539022f, 0.0076986384f, 0.02136388f},
                  {-0.085999385f, -0.011615623f, -0.010077139f, 0.15200093f, 0.0069287745f, 0.019227492f},
                  {-0.04641243f, -0.0104540605f, -0.009069425f, 0.28160408f, 0.006235897f, 0.017304743f},
                  {-0.06520459f, 0.04430003f, 0.0005799162f, 0.24040458f, -0.021240894f, 0.011203255f},
                  {-0.028378999f, 0.039870027f, 0.001808384f, 0.28156266f, -0.019116804f, 0.011208345f},
                  {-0.048071247f, 0.035155002f, -0.007828957f, 0.37023512f, -0.001761808f, 0.029645907f},
                  {-0.040822897f, 0.0316395f, -0.0070460616f, 0.39183393f, -0.0015856272f, 0.026681317f},
                  {-0.04865321f, 0.028475553f, -0.006341455f, 0.37532404f, -0.0014270644f, 0.024013184f},
              },
          },
          {
              "fc2.bias",
              {
                  {0.0f, 0.0f},
                  {-0.073845945f, 0.17262223f},
                  {-0.11096197f, 0.31533316f},
                  {-0.12759227f, 0.30179757f},
                  {-0.18072231f, 0.33101577f},
                  {-0.12312768f, 0.49899623f},
                  {-0.122494474f, 0.4128375f},
                  {-0.046320792f, 0.5066932f},
                  {-0.09691986f, 0.68426347f},
                  {-0.08471765f, 0.6980852f},
                  {-0.09920036f, 0.629414f},
              },
          },
      };

  // 11 steps of momentum2 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum2s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {9.1895e-06f, 3.10794e-05f, 0.0f, 0.0f, 0.0001058158f, 1.6247e-06f},
                  {1.38504e-05f, 3.81965e-05f, 1.0611e-06f, 1.46e-08f, 0.0001199001f, 5.29932e-05f},
                  {3.51124e-05f, 4.1991e-05f, 3.4089e-06f, 6.417e-06f, 0.0001198822f, 5.33015e-05f},
                  {5.41068e-05f, 4.41305e-05f, 3.4054e-06f, 6.4106e-06f, 0.0001197623f, 5.32482e-05f},
                  {8.42961e-05f, 0.0003451165f, 3.402e-06f, 6.4042e-06f, 0.0001196426f, 5.31949e-05f},
                  {0.0004302918f, 0.0009178267f, 3.36697e-05f, 5.77795e-05f, 0.0001222354f, 5.77458e-05f},
                  {0.0004565598f, 0.0009199237f, 3.3636e-05f, 5.77218e-05f, 0.0001270761f, 5.95244e-05f},
                  {0.0004583212f, 0.0009549049f, 0.0002876537f, 9.16664e-05f, 0.000127229f, 8.95498e-05f},
                  {0.0004643646f, 0.0009588512f, 0.000287366f, 9.15747e-05f, 0.0001271018f, 8.94603e-05f},
                  {0.000464401f, 0.0009632857f, 0.0002870786f, 9.14832e-05f, 0.0001269747f, 8.93708e-05f},
              },
          },
          {
              "fc1.bias",
              {
                  {0.0f, 0.0f, 0.0f},
                  {9.54826e-05f, 0.0f, 0.0001327461f},
                  {0.0001216503f, 6.409e-07f, 0.0002738377f},
                  {0.0001393797f, 6.6666e-06f, 0.0002738696f},
                  {0.0002350406f, 6.6599e-06f, 0.0002735957f},
                  {0.000317196f, 6.6533e-06f, 0.0002733221f},
                  {0.000322518f, 3.34157e-05f, 0.0002754474f},
                  {0.0004694783f, 3.33822e-05f, 0.0003100796f},
                  {0.0004999148f, 0.0002438821f, 0.0003486569f},
                  {0.0005019825f, 0.0002436382f, 0.0003483083f},
                  {0.000514805f, 0.0002433946f, 0.00034796f},
              },
          },
          {
              "fc2.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {0.0001012934f, 0.0f, 1.04611e-05f, 0.0006197428f, 0.0f, 4.15992e-05f},
                  {0.0001426357f, 1.687e-07f, 1.05037e-05f, 0.00113843f, 4.63e-07f, 4.23176e-05f},
                  {0.000160821f, 1.3945e-05f, 1.10024e-05f, 0.0011418712f, 3.7827e-06f, 4.28332e-05f},
                  {0.0002771035f, 1.39311e-05f, 1.09914e-05f, 0.0012316301f, 3.7789e-06f, 4.27904e-05f},
                  {0.000372846f, 1.39172e-05f, 1.09804e-05f, 0.0033271962f, 3.7751e-06f, 4.27476e-05f},
                  {0.0004273856f, 0.0003023656f, 1.86123e-05f, 0.0033408708f, 7.58808e-05f, 4.46155e-05f},
                  {0.0005187982f, 0.0003020632f, 1.87592e-05f, 0.003762615f, 7.58049e-05f, 4.46975e-05f},
                  {0.0005690402f, 0.0003018141f, 2.7683e-05f, 0.0051237475f, 9.95787e-05f, 8.29059e-05f},
                  {0.0005690671f, 0.0003015123f, 2.76553e-05f, 0.005462282f, 9.94792e-05f, 8.2823e-05f},
                  {0.000582689f, 0.0003012108f, 2.76277e-05f, 0.0055082287f, 9.93797e-05f, 8.27402e-05f},
              },
          },
          {
              "fc2.bias",
              {
                  {0.0f, 0.0f},
                  {0.0005453224f, 0.0029798434f},
                  {0.0007428076f, 0.005536005f},
                  {0.0008189408f, 0.005562861f},
                  {0.0012522616f, 0.00591011f},
                  {0.0014072113f, 0.009947599f},
                  {0.0014194453f, 0.0100691235f},
                  {0.0018266566f, 0.011885322f},
                  {0.002129878f, 0.01708277f},
                  {0.002128378f, 0.017742163f},
                  {0.0021789405f, 0.01772455f},
              },
          },
      };

  ASSERT_EQ(named_weights.size(), 4);
  ASSERT_EQ(named_gradients.size(), 4);
  ASSERT_EQ(named_momentum1s.size(), 4);
  ASSERT_EQ(named_momentum2s.size(), 4);

  ASSERT_EQ(named_weights["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_gradients["fc1.weight"].size(), total_step);
  ASSERT_EQ(named_momentum1s["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_momentum2s["fc1.weight"].size(), total_step + 1);

  std::unordered_map<std::string, VectorInt64> weight_name_shape_mapping =
      {{"fc1.weight", {2, 3}}, {"fc1.bias", {3}}, {"fc2.weight", {3, 2}}, {"fc2.bias", {2}}};

  AdamWTestLoop(use_baseline_for_each_iteration, total_step, lr,
                static_cast<float>(0.9f),    // alpha
                static_cast<float>(0.999f),  // beta
                static_cast<float>(1e-8f),   // epsilon
                static_cast<float>(1e-2f),   // weight_decay
                static_cast<int64_t>(0),     // adam_mode
                static_cast<int64_t>(1),     // correct_bias
                named_weights, named_gradients,
                named_momentum1s, named_momentum2s,
                weight_name_shape_mapping,
                weight_tolerance,
                momentum1_tolerance,
                momentum2_tolerance);
}

TEST(AdamWTest, TorchAdamWMultipleWeightsTest_Loop10Steps) {
  TorchAdamWMultipleWeightsTestLoop10Steps(true);
}

TEST(AdamWTest, TorchAdamWMultipleWeightsStrictTest_Loop10Steps) {
  TorchAdamWMultipleWeightsTestLoop10Steps(false);
}

void HFAdamWSingleWeightTestLoop10Steps(bool use_baseline_for_each_iteration) {
  size_t total_step = 10;
  float lr = 1e-03f;

  std::pair<float, float> weight_tolerance{1e-4f, 1e-5f};  // rtol, atol
  std::pair<float, float> momentum1_tolerance{1e-3f, 1e-6f};
  std::pair<float, float> momentum2_tolerance{1e-2f, 1e-7f};

  // Test data generated by onnxruntime/test/testdata/optimizers/adamw_test_data_generator.py

  // 11 steps of weight values before applying optimization.
  std ::unordered_map<std::string, std::vector<std::vector<float>>> named_weights{
      {
          "fc1.weight",
          {
              {-0.18330415f, 0.6739549f, 0.3117089f, 0.42830977f, -0.39579117f, 0.07424858f},
              {-0.18230432f, 0.6729549f, 0.3127084f, 0.4273098f, -0.39479163f, 0.07324896f},
              {-0.18132173f, 0.67254347f, 0.31352982f, 0.42675862f, -0.3951839f, 0.07235443f},
              {-0.18060243f, 0.6721953f, 0.31336504f, 0.42616716f, -0.39526412f, 0.071780846f},
              {-0.17978439f, 0.67173433f, 0.31390327f, 0.42547306f, -0.39564267f, 0.07182653f},
              {-0.17980579f, 0.6710924f, 0.3139063f, 0.4246846f, -0.39523974f, 0.07234102f},
              {-0.17990471f, 0.67033243f, 0.3141835f, 0.4244765f, -0.3947254f, 0.072943345f},
              {-0.17998517f, 0.66960216f, 0.3144741f, 0.42425588f, -0.3940671f, 0.07337138f},
              {-0.17966875f, 0.6688048f, 0.31471828f, 0.42398554f, -0.39330435f, 0.0732299f},
              {-0.17923719f, 0.66809684f, 0.31515577f, 0.4237177f, -0.39246938f, 0.073099114f},
              {-0.17888436f, 0.6673463f, 0.31526533f, 0.42344636f, -0.39184403f, 0.072780155f},
          },
      },
  };

  // 10 steps of gradient values used to apply optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>> named_gradients{
      {
          "fc1.weight",
          {
              {-0.18660535f, 1.0501877f, -0.06538727f, 0.78924006f, -0.06989894f, 0.08311288f},
              {-0.14019372f, -0.33581784f, -0.0152721405f, -0.11933225f, 0.15028848f, 0.3035296f},
              {0.014210129f, 0.05260541f, 0.097171515f, 0.23888281f, -0.056654252f, -0.053932384f},
              {-0.31330115f, 0.3852994f, -0.53358376f, 0.41899636f, 0.11755433f, -0.29190654f},
              {0.5206307f, 0.90298563f, 0.45159638f, 1.2402637f, -0.57814527f, -0.9771225f},
              {0.10178496f, 1.272584f, -0.4388461f, -1.229053f, -0.2420594f, -0.41463128f},
              {-0.007730415f, 0.28626472f, -0.082126565f, 0.15444252f, -0.46201625f, 0.20600216f},
              {-0.71351f, 0.98043907f, 0.020160869f, 0.3170406f, -0.64007777f, 1.4057107f},
              {-0.35445014f, 0.0007170309f, -0.5025207f, 0.11615195f, -0.77056587f, 0.01938322f},
              {0.06728999f, 0.71267974f, 0.53454334f, 0.13664238f, 0.27906644f, 0.8989229f},
          },
      },
  };

  // 11 steps of momentum1 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum1s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {-0.018660536f, 0.10501877f, -0.0065387273f, 0.07892401f, -0.0069898935f, 0.008311288f},
                  {-0.030813852f, 0.06093511f, -0.007412069f, 0.05909838f, 0.008737944f, 0.03783312f},
                  {-0.026311453f, 0.06010214f, 0.0030462903f, 0.07707683f, 0.0021987236f, 0.02865657f},
                  {-0.055010427f, 0.09262186f, -0.050616715f, 0.11126879f, 0.013734283f, -0.003399741f},
                  {0.0025536926f, 0.17365824f, -0.0003954024f, 0.22416827f, -0.04545367f, -0.100772016f},
                  {0.01247682f, 0.2835508f, -0.04424047f, 0.078846134f, -0.065114245f, -0.13215794f},
                  {0.010456095f, 0.28382218f, -0.04802908f, 0.08640577f, -0.10480444f, -0.09834193f},
                  {-0.061940514f, 0.3534839f, -0.041210085f, 0.10946925f, -0.15833177f, 0.05206334f},
                  {-0.09119148f, 0.3182072f, -0.087341145f, 0.11013751f, -0.21955517f, 0.048795324f},
                  {-0.075343326f, 0.35765445f, -0.025152696f, 0.11278799f, -0.16969301f, 0.13380808f},
              },
          },
      };

  // 11 steps of momentum2 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum2s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {3.48216e-05f, 0.0011028942f, 4.2755e-06f, 0.0006228999f, 4.8859e-06f, 6.9078e-06f},
                  {5.4441e-05f, 0.0012145649f, 4.5045e-06f, 0.0006365172f, 2.74676e-05f, 9.90311e-05f},
                  {5.45885e-05f, 0.0012161176f, 1.39423e-05f, 0.0006929458f, 3.06498e-05f, 0.0001018407f},
                  {0.0001526915f, 0.0013633572f, 0.00029864f, 0.0008678107f, 4.44382e-05f, 0.0001869483f},
                  {0.0004235952f, 0.002177377f, 0.0005022806f, 0.0024051971f, 0.0003786457f, 0.0011415298f},
                  {0.0004335318f, 0.0037946696f, 0.0006943642f, 0.0039133634f, 0.0004368598f, 0.0013123073f},
                  {0.000433158f, 0.0038728225f, 0.0007004146f, 0.0039333026f, 0.000649882f, 0.001353432f},
                  {0.0009418214f, 0.0048302105f, 0.0007001207f, 0.004029884f, 0.0010589317f, 0.0033281012f},
                  {0.0010665145f, 0.0048253806f, 0.0009519476f, 0.0040393453f, 0.0016516446f, 0.003325149f},
                  {0.001069976f, 0.005328468f, 0.0012367324f, 0.0040539773f, 0.0017278712f, 0.004129886f},
              },
          },
      };

  ASSERT_EQ(named_weights.size(), 1);
  ASSERT_EQ(named_gradients.size(), 1);
  ASSERT_EQ(named_momentum1s.size(), 1);
  ASSERT_EQ(named_momentum2s.size(), 1);

  ASSERT_EQ(named_weights["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_gradients["fc1.weight"].size(), total_step);
  ASSERT_EQ(named_momentum1s["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_momentum2s["fc1.weight"].size(), total_step + 1);

  std::unordered_map<std::string, VectorInt64> weight_name_shape_mapping =
      {{"fc1.weight", {2, 3}}};

  AdamWTestLoop(use_baseline_for_each_iteration, total_step, lr,
                static_cast<float>(0.9f),    // alpha
                static_cast<float>(0.999f),  // beta
                static_cast<float>(1e-6f),   // epsilon
                static_cast<float>(0.0f),    // weight_decay
                static_cast<int64_t>(1),     // adam_mode
                static_cast<int64_t>(1),     // correct_bias
                named_weights, named_gradients,
                named_momentum1s, named_momentum2s,
                weight_name_shape_mapping,
                weight_tolerance,
                momentum1_tolerance,
                momentum2_tolerance);
}

TEST(AdamWTest, HFAdamWSingleWeightTest_Loop10Steps) {
  HFAdamWSingleWeightTestLoop10Steps(false);
}

TEST(AdamWTest, HFAdamWSingleWeightStrictTest_Loop10Steps) {
  HFAdamWSingleWeightTestLoop10Steps(true);
}

void HFAdamWMultipleWeightsTestLoop10Steps(
    bool use_baseline_for_each_iteration) {
  size_t total_step = 10;
  float lr = 1e-03f;

  std::pair<float, float> weight_tolerance{1e-4f, 1e-5f};  // rtol, atol
  std::pair<float, float> momentum1_tolerance{1e-3f, 1e-6f};
  std::pair<float, float> momentum2_tolerance{1e-2f, 1e-7f};

  if (!use_baseline_for_each_iteration) {
    // Loose the tolerance as all states are maintained (without reloading from baseline) across different steps.
    momentum2_tolerance.first = 1e-3f;
    momentum2_tolerance.second = 1e-6f;
  }

  // Test data generated by onnxruntime/test/testdata/optimizers/adamw_test_data_generator.py

  // 11 steps of weight values before applying optimization.
  std ::unordered_map<std::string, std::vector<std::vector<float>>> named_weights{
      {
          "fc1.weight",
          {
              {0.039699044f, -0.1405438f, 0.6361624f, 0.3636222f, -0.21526536f, 0.3459897f},
              {0.040698715f, -0.14154363f, 0.6361624f, 0.3636222f, -0.21426547f, 0.3449905f},
              {0.040812083f, -0.14246951f, 0.6369058f, 0.36288416f, -0.21389234f, 0.34414068f},
              {0.040369906f, -0.14334475f, 0.63775635f, 0.36349458f, -0.21362267f, 0.3434334f},
              {0.040422853f, -0.14391455f, 0.63845307f, 0.3639946f, -0.21340178f, 0.34285408f},
              {0.040131994f, -0.14459613f, 0.63904196f, 0.36441723f, -0.21321507f, 0.3423644f},
              {0.040489312f, -0.1445436f, 0.6387083f, 0.36404616f, -0.21313372f, 0.34181213f},
              {0.040669657f, -0.14446883f, 0.6384169f, 0.36372212f, -0.21296401f, 0.3412484f},
              {0.040862735f, -0.14450029f, 0.63879496f, 0.36319363f, -0.21279131f, 0.3405561f},
              {0.041090745f, -0.14456306f, 0.6391306f, 0.36272448f, -0.21263799f, 0.3399415f},
              {0.041278224f, -0.14465518f, 0.6394301f, 0.36230576f, -0.21250115f, 0.339393f},
          },
      },
      {
          "fc1.bias",
          {
              {0.5179555f, -0.43510795f, -0.12118204f},
              {0.5169556f, -0.43510795f, -0.12218197f},
              {0.5160166f, -0.43436474f, -0.123182595f},
              {0.5151102f, -0.43357942f, -0.12397698f},
              {0.5141677f, -0.43293613f, -0.1246277f},
              {0.5137603f, -0.4323924f, -0.12517771f},
              {0.5133432f, -0.4326506f, -0.1256984f},
              {0.5133251f, -0.43287608f, -0.12629665f},
              {0.51318634f, -0.432489f, -0.12695934f},
              {0.5130984f, -0.43214542f, -0.12754764f},
              {0.512943f, -0.43183872f, -0.12807268f},
          },
      },
      {
          "fc2.weight",
          {
              {-0.5107945f, 0.045720927f, 0.21493156f, -0.03950736f, -0.35901335f, 0.30300942f},
              {-0.5097946f, 0.045720927f, 0.21593124f, -0.04050732f, -0.35901335f, 0.30200958f},
              {-0.5088292f, 0.04646326f, 0.21665226f, -0.041504018f, -0.35975638f, 0.30124596f},
              {-0.5079111f, 0.047161248f, 0.21733399f, -0.04231338f, -0.3605556f, 0.30058664f},
              {-0.50696176f, 0.047732998f, 0.21789241f, -0.043109298f, -0.36121026f, 0.30004656f},
              {-0.50654715f, 0.048216257f, 0.21836439f, -0.043951426f, -0.3617636f, 0.29959008f},
              {-0.5060264f, 0.047795646f, 0.2183422f, -0.04463814f, -0.36136106f, 0.2993132f},
              {-0.50582683f, 0.047428325f, 0.21827532f, -0.04537316f, -0.3610095f, 0.29904476f},
              {-0.50551087f, 0.04711111f, 0.21850857f, -0.046184022f, -0.36098182f, 0.29853436f},
              {-0.50524634f, 0.046829507f, 0.21871562f, -0.04700344f, -0.36095726f, 0.29808128f},
              {-0.5049375f, 0.046578184f, 0.2189004f, -0.047778137f, -0.36093533f, 0.29767692f},
          },
      },
      {
          "fc2.bias",
          {
              {0.023823332f, 0.53758854f},
              {0.02482329f, 0.53658855f},
              {0.025781307f, 0.53559124f},
              {0.026681963f, 0.5347738f},
              {0.027620444f, 0.5339826f},
              {0.028186643f, 0.53311956f},
              {0.028723473f, 0.5324403f},
              {0.028897049f, 0.5316961f},
              {0.029226314f, 0.5308753f},
              {0.029510176f, 0.5300653f},
              {0.029835783f, 0.52934104f},
          },
      },
  };

  // 10 steps of gradient values used to apply optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>> named_gradients{
      {
          "fc1.weight",
          {
              {-0.09586181f, 0.17629345f, 0.0f, 0.0f, -0.32529348f, 0.04030715f},
              {0.06834118f, 0.08454809f, -0.03257603f, 0.003821307f, 0.11912338f, 0.22665249f},
              {0.14587241f, 0.061909888f, -0.048467256f, -0.08001699f, 0.01010122f, 0.019008288f},
              {-0.13795517f, -0.046709955f, 0.0f, 0.0f, 0.0f, 0.0f},
              {0.17391214f, 0.5486637f, 0.0f, 0.0f, 0.0f, 0.0f},
              {-0.5883157f, -0.7570428f, 0.17399102f, 0.22668226f, 0.05208155f, 0.06785387f},
              {0.1634007f, -0.054908697f, 0.0f, 0.0f, -0.07045339f, 0.042855613f},
              {-0.04708763f, 0.18948916f, -0.50407434f, 0.18441166f, -0.01673333f, 0.1734673f},
              {-0.08061128f, 0.06998594f, 0.0f, 0.0f, 0.0f, 0.0f},
              {0.022378631f, 0.07342364f, 0.0f, 0.0f, 0.0f, 0.0f},
          },
      },
      {
          "fc1.bias",
          {
              {0.30900255f, 0.0f, 0.36434337f},
              {0.16206324f, -0.025315944f, 0.37580276f},
              {0.13361552f, -0.077632844f, 0.01748341f},
              {0.30953294f, 0.0f, 0.0f},
              {-0.287035f, 0.0f, 0.0f},
              {0.075108826f, 0.16361739f, 0.04897636f},
              {-0.38378465f, 0.0f, 0.18684858f},
              {0.17582831f, -0.4588748f, 0.19721851f},
              {-0.050648615f, 0.0f, 0.0f},
              {0.11546661f, 0.0f, 0.0f},
          },
      },
      {
          "fc2.weight",
          {
              {-0.31826627f, 0.0f, -0.10227942f, 0.7872374f, 0.0f, 0.2039589f},
              {-0.2035816f, -0.012988876f, -0.0072859353f, 0.72063875f, 0.021517584f, 0.02756824f},
              {-0.13538884f, -0.11738108f, -0.022565873f, 0.06767718f, 0.057625376f, 0.023622716f},
              {-0.34125668f, 0.0f, 0.0f, 0.3015144f, 0.0f, 0.0f},
              {0.30986175f, 0.0f, 0.0f, 1.4481032f, 0.0f, 0.0f},
              {-0.2343559f, 0.5371115f, 0.087428816f, -0.1303899f, -0.26854572f, -0.04371277f},
              {0.30305678f, 0.0f, 0.01286526f, 0.6520397f, 0.0f, 0.011255648f},
              {-0.22533442f, -0.007282924f, -0.09457447f, 1.1683875f, 0.15443821f, 0.19560373f},
              {0.02437459f, 0.0f, 0.0f, 0.5862967f, 0.0f, 0.0f},
              {-0.11917039f, 0.0f, 0.0f, 0.22678037f, 0.0f, 0.0f},
          },
      },
      {
          "fc2.bias",
          {
              {-0.73845947f, 1.7262223f},
              {-0.44501105f, 1.5997354f},
              {-0.2772748f, 0.17998222f},
              {-0.65890837f, 0.5939946f},
              {0.39519566f, 2.0108397f},
              {-0.11681646f, -0.36257744f},
              {0.6392148f, 1.3514249f},
              {-0.55234224f, 2.2824335f},
              {0.025046706f, 0.8225188f},
              {-0.22959742f, 0.0114171505f},
          },
      },
  };

  // 11 steps of momentum1 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum1s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {-0.009586181f, 0.017629346f, 0.0f, 0.0f, -0.03252935f, 0.004030715f},
                  {-0.0017934436f, 0.024321219f, -0.003257603f, 0.0003821307f, -0.017364075f, 0.026292892f},
                  {0.012973143f, 0.028080087f, -0.007778568f, -0.0076577817f, -0.0146175455f, 0.025564432f},
                  {-0.0021196895f, 0.02060108f, -0.0070007113f, -0.006892003f, -0.013155791f, 0.023007989f},
                  {0.015483495f, 0.073407345f, -0.00630064f, -0.006202803f, -0.011840211f, 0.02070719f},
                  {-0.044896428f, -0.009637676f, 0.011728527f, 0.017085703f, -0.005448035f, 0.025421858f},
                  {-0.024066713f, -0.0141647775f, 0.010555674f, 0.015377133f, -0.011948571f, 0.027165232f},
                  {-0.026368804f, 0.0062006167f, -0.040907327f, 0.032280587f, -0.012427047f, 0.041795436f},
                  {-0.03179305f, 0.012579149f, -0.036816593f, 0.029052528f, -0.011184342f, 0.03761589f},
                  {-0.02637588f, 0.018663598f, -0.033134934f, 0.026147274f, -0.010065908f, 0.033854302f},
              },
          },
          {
              "fc1.bias",
              {
                  {0.0f, 0.0f, 0.0f},
                  {0.030900257f, 0.0f, 0.036434337f},
                  {0.044016555f, -0.0025315944f, 0.07037118f},
                  {0.052976448f, -0.010041719f, 0.0650824f},
                  {0.078632094f, -0.009037547f, 0.058574155f},
                  {0.042065386f, -0.008133792f, 0.052716743f},
                  {0.04536973f, 0.009041326f, 0.0523427f},
                  {0.0024542885f, 0.0081371935f, 0.06579329f},
                  {0.01979169f, -0.038564004f, 0.07893581f},
                  {0.012747658f, -0.034707602f, 0.071042225f},
                  {0.023019554f, -0.031236842f, 0.063938f},
              },
          },
          {
              "fc2.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {-0.031826627f, 0.0f, -0.010227942f, 0.07872374f, 0.0f, 0.02039589f},
                  {-0.049002126f, -0.0012988875f, -0.009933741f, 0.14291525f, 0.0021517584f, 0.021113126f},
                  {-0.057640795f, -0.012907107f, -0.011196953f, 0.13539144f, 0.00769912f, 0.021364084f},
                  {-0.08600238f, -0.011616397f, -0.010077258f, 0.15200374f, 0.006929208f, 0.019227674f},
                  {-0.046415962f, -0.010454757f, -0.009069531f, 0.28161368f, 0.0062362873f, 0.017304907f},
                  {-0.065209955f, 0.04430187f, 0.000580304f, 0.24041331f, -0.021241914f, 0.011203138f},
                  {-0.02838328f, 0.03987168f, 0.0018087996f, 0.28157595f, -0.019117722f, 0.011208389f},
                  {-0.048078395f, 0.035156216f, -0.007829527f, 0.3702571f, -0.0017621284f, 0.029647924f},
                  {-0.040833097f, 0.031640593f, -0.0070465743f, 0.39186105f, -0.0015859156f, 0.02668313f},
                  {-0.048666827f, 0.02847653f, -0.0063419165f, 0.37535298f, -0.001427324f, 0.024014816f},
              },
          },
          {
              "fc2.bias",
              {
                  {0.0f, 0.0f},
                  {-0.073845945f, 0.17262223f},
                  {-0.11096244f, 0.31533355f},
                  {-0.12759368f, 0.3017984f},
                  {-0.18072514f, 0.331018f},
                  {-0.12313307f, 0.49900016f},
                  {-0.1225014f, 0.41284242f},
                  {-0.04632978f, 0.50670063f},
                  {-0.096931025f, 0.6842739f},
                  {-0.08473325f, 0.6980984f},
                  {-0.09921966f, 0.6294303f},
              },
          },
      };

  // 11 steps of momentum2 values before applying optimization.
  std::unordered_map<std::string, std::vector<std::vector<float>>>
      named_momentum2s{
          {
              "fc1.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {9.1895e-06f, 3.10794e-05f, 0.0f, 0.0f, 0.0001058158f, 1.6247e-06f},
                  {1.38508e-05f, 3.81967e-05f, 1.0612e-06f, 1.46e-08f, 0.0001199004f, 5.29944e-05f},
                  {3.51157e-05f, 4.19913e-05f, 3.4092e-06f, 6.4173e-06f, 0.0001198826f, 5.33027e-05f},
                  {5.41122e-05f, 4.41312e-05f, 3.4058e-06f, 6.4109e-06f, 0.0001197627f, 5.32494e-05f},
                  {8.43036e-05f, 0.0003451189f, 3.4024e-06f, 6.4045e-06f, 0.0001196429f, 5.31962e-05f},
                  {0.0004303346f, 0.0009178877f, 3.36719e-05f, 5.77829e-05f, 0.0001222358f, 5.77471e-05f},
                  {0.0004566041f, 0.0009199848f, 3.36382e-05f, 5.77251e-05f, 0.0001270772f, 5.9526e-05f},
                  {0.0004583648f, 0.000954971f, 0.0002876955f, 9.16751e-05f, 0.0001272302f, 8.95574e-05f},
                  {0.0004644046f, 0.0009589141f, 0.0002874078f, 9.15834e-05f, 0.0001271029f, 8.94678e-05f},
                  {0.000464441f, 0.0009633462f, 0.0002871204f, 9.14918e-05f, 0.0001269758f, 8.93783e-05f},
              },
          },
          {
              "fc1.bias",
              {
                  {0.0f, 0.0f, 0.0f},
                  {9.54826e-05f, 0.0f, 0.0001327461f},
                  {0.0001216516f, 6.409e-07f, 0.0002738411f},
                  {0.0001393831f, 6.6671e-06f, 0.0002738729f},
                  {0.0002350543f, 6.6604e-06f, 0.000273599f},
                  {0.0003172084f, 6.6538e-06f, 0.0002733254f},
                  {0.0003225325f, 3.34178e-05f, 0.0002754508f},
                  {0.0004695006f, 3.33844e-05f, 0.0003100878f},
                  {0.0004999468f, 0.0002439171f, 0.0003486728f},
                  {0.0005020121f, 0.0002436732f, 0.0003483242f},
                  {0.0005148426f, 0.0002434295f, 0.0003479759f},
              },
          },
          {
              "fc2.weight",
              {
                  {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
                  {0.0001012934f, 0.0f, 1.04611e-05f, 0.0006197428f, 0.0f, 4.15992e-05f},
                  {0.0001426376f, 1.687e-07f, 1.05037e-05f, 0.0011384432f, 4.63e-07f, 4.23176e-05f},
                  {0.0001608251f, 1.39469e-05f, 1.10024e-05f, 0.0011418851f, 3.7832e-06f, 4.28334e-05f},
                  {0.0002771204f, 1.39329e-05f, 1.09914e-05f, 0.0012316541f, 3.7794e-06f, 4.27905e-05f},
                  {0.0003728576f, 1.3919e-05f, 1.09804e-05f, 0.0033274253f, 3.7757e-06f, 4.27477e-05f},
                  {0.0004274074f, 0.0003023939f, 1.86132e-05f, 0.0033410995f, 7.58887e-05f, 4.46158e-05f},
                  {0.0005188234f, 0.0003020915f, 1.87601e-05f, 0.003762914f, 7.58128e-05f, 4.46979e-05f},
                  {0.0005690802f, 0.0003018424f, 2.76857e-05f, 0.0051242807f, 9.95882e-05f, 8.2914e-05f},
                  {0.0005691052f, 0.0003015406f, 2.7658e-05f, 0.0054629003f, 9.94886e-05f, 8.28311e-05f},
                  {0.0005827378f, 0.000301239f, 2.76304e-05f, 0.005508867f, 9.93891e-05f, 8.27482e-05f},
              },
          },
          {
              "fc2.bias",
              {
                  {0.0f, 0.0f},
                  {0.0005453224f, 0.0029798434f},
                  {0.000742812f, 0.005536017f},
                  {0.0008189504f, 0.005562875f},
                  {0.0012522918f, 0.005910142f},
                  {0.0014072192f, 0.009947708f},
                  {0.0014194581f, 0.010069223f},
                  {0.0018266342f, 0.011885503f},
                  {0.0021298896f, 0.017083121f},
                  {0.0021283869f, 0.017742576f},
                  {0.0021789735f, 0.017724965f},
              },
          },
      };

  ASSERT_EQ(named_weights.size(), 4);
  ASSERT_EQ(named_gradients.size(), 4);
  ASSERT_EQ(named_momentum1s.size(), 4);
  ASSERT_EQ(named_momentum2s.size(), 4);

  ASSERT_EQ(named_weights["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_gradients["fc1.weight"].size(), total_step);
  ASSERT_EQ(named_momentum1s["fc1.weight"].size(), total_step + 1);
  ASSERT_EQ(named_momentum2s["fc1.weight"].size(), total_step + 1);

  std::unordered_map<std::string, VectorInt64> weight_name_shape_mapping =
      {{"fc1.weight", {2, 3}}, {"fc1.bias", {3}}, {"fc2.weight", {3, 2}}, {"fc2.bias", {2}}};

  AdamWTestLoop(use_baseline_for_each_iteration, total_step, lr,
                static_cast<float>(0.9f),    // alpha
                static_cast<float>(0.999f),  // beta
                static_cast<float>(1e-6f),   // epsilon
                static_cast<float>(0.0f),    // weight_decay
                static_cast<int64_t>(1),     // adam_mode
                static_cast<int64_t>(1),     // correct_bias
                named_weights, named_gradients,
                named_momentum1s, named_momentum2s,
                weight_name_shape_mapping,
                weight_tolerance,
                momentum1_tolerance,
                momentum2_tolerance);
}

TEST(AdamWTest, HFAdamWMultipleWeightsTest_Loop10Steps) {
  HFAdamWMultipleWeightsTestLoop10Steps(false);
}

TEST(AdamWTest, HFAdamWMultipleWeightsStrictTest_Loop10Steps) {
  HFAdamWMultipleWeightsTestLoop10Steps(true);
}

}  // namespace

#endif  // USE_CUDA

}  // namespace optimizer
}  // namespace test
}  // namespace onnxruntime
